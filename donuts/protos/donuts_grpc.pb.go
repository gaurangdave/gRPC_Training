// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DonutsServiceClient is the client API for DonutsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonutsServiceClient interface {
	// RPC to check if the donut shop is open or not
	AreYouOpen(ctx context.Context, in *AreYouOpenRequest, opts ...grpc.CallOption) (*AreYouOpenResponse, error)
	// RPC to update db with newly prepared donuts
	CreateDonuts(ctx context.Context, in *CreateDonutsRequest, opts ...grpc.CallOption) (*CreateDonutsResponse, error)
	// RPC to get list of all available donuts
	GetDonutsList(ctx context.Context, in *GetDonutsListRequest, opts ...grpc.CallOption) (*GetDonutsListResponse, error)
	// RPC to order donuts online
	OrderDonuts(ctx context.Context, in *OrderDonutsRequest, opts ...grpc.CallOption) (*OrderDonutsResponse, error)
	// RPC to update the database with donuts sold in shop
	UpdateDonuts(ctx context.Context, in *UpdateDonutsRequest, opts ...grpc.CallOption) (*UpdateDonutsReponse, error)
	// RPC to delete donuts from database at the end of  the day
	ClearDonuts(ctx context.Context, in *ClearDonutsRequest, opts ...grpc.CallOption) (*ClearDonutsResponse, error)
}

type donutsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDonutsServiceClient(cc grpc.ClientConnInterface) DonutsServiceClient {
	return &donutsServiceClient{cc}
}

func (c *donutsServiceClient) AreYouOpen(ctx context.Context, in *AreYouOpenRequest, opts ...grpc.CallOption) (*AreYouOpenResponse, error) {
	out := new(AreYouOpenResponse)
	err := c.cc.Invoke(ctx, "/donuts.DonutsService/AreYouOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donutsServiceClient) CreateDonuts(ctx context.Context, in *CreateDonutsRequest, opts ...grpc.CallOption) (*CreateDonutsResponse, error) {
	out := new(CreateDonutsResponse)
	err := c.cc.Invoke(ctx, "/donuts.DonutsService/CreateDonuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donutsServiceClient) GetDonutsList(ctx context.Context, in *GetDonutsListRequest, opts ...grpc.CallOption) (*GetDonutsListResponse, error) {
	out := new(GetDonutsListResponse)
	err := c.cc.Invoke(ctx, "/donuts.DonutsService/GetDonutsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donutsServiceClient) OrderDonuts(ctx context.Context, in *OrderDonutsRequest, opts ...grpc.CallOption) (*OrderDonutsResponse, error) {
	out := new(OrderDonutsResponse)
	err := c.cc.Invoke(ctx, "/donuts.DonutsService/OrderDonuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donutsServiceClient) UpdateDonuts(ctx context.Context, in *UpdateDonutsRequest, opts ...grpc.CallOption) (*UpdateDonutsReponse, error) {
	out := new(UpdateDonutsReponse)
	err := c.cc.Invoke(ctx, "/donuts.DonutsService/UpdateDonuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donutsServiceClient) ClearDonuts(ctx context.Context, in *ClearDonutsRequest, opts ...grpc.CallOption) (*ClearDonutsResponse, error) {
	out := new(ClearDonutsResponse)
	err := c.cc.Invoke(ctx, "/donuts.DonutsService/ClearDonuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonutsServiceServer is the server API for DonutsService service.
// All implementations must embed UnimplementedDonutsServiceServer
// for forward compatibility
type DonutsServiceServer interface {
	// RPC to check if the donut shop is open or not
	AreYouOpen(context.Context, *AreYouOpenRequest) (*AreYouOpenResponse, error)
	// RPC to update db with newly prepared donuts
	CreateDonuts(context.Context, *CreateDonutsRequest) (*CreateDonutsResponse, error)
	// RPC to get list of all available donuts
	GetDonutsList(context.Context, *GetDonutsListRequest) (*GetDonutsListResponse, error)
	// RPC to order donuts online
	OrderDonuts(context.Context, *OrderDonutsRequest) (*OrderDonutsResponse, error)
	// RPC to update the database with donuts sold in shop
	UpdateDonuts(context.Context, *UpdateDonutsRequest) (*UpdateDonutsReponse, error)
	// RPC to delete donuts from database at the end of  the day
	ClearDonuts(context.Context, *ClearDonutsRequest) (*ClearDonutsResponse, error)
	mustEmbedUnimplementedDonutsServiceServer()
}

// UnimplementedDonutsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDonutsServiceServer struct {
}

func (UnimplementedDonutsServiceServer) AreYouOpen(context.Context, *AreYouOpenRequest) (*AreYouOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouOpen not implemented")
}
func (UnimplementedDonutsServiceServer) CreateDonuts(context.Context, *CreateDonutsRequest) (*CreateDonutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonuts not implemented")
}
func (UnimplementedDonutsServiceServer) GetDonutsList(context.Context, *GetDonutsListRequest) (*GetDonutsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonutsList not implemented")
}
func (UnimplementedDonutsServiceServer) OrderDonuts(context.Context, *OrderDonutsRequest) (*OrderDonutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDonuts not implemented")
}
func (UnimplementedDonutsServiceServer) UpdateDonuts(context.Context, *UpdateDonutsRequest) (*UpdateDonutsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDonuts not implemented")
}
func (UnimplementedDonutsServiceServer) ClearDonuts(context.Context, *ClearDonutsRequest) (*ClearDonutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearDonuts not implemented")
}
func (UnimplementedDonutsServiceServer) mustEmbedUnimplementedDonutsServiceServer() {}

// UnsafeDonutsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonutsServiceServer will
// result in compilation errors.
type UnsafeDonutsServiceServer interface {
	mustEmbedUnimplementedDonutsServiceServer()
}

func RegisterDonutsServiceServer(s grpc.ServiceRegistrar, srv DonutsServiceServer) {
	s.RegisterService(&DonutsService_ServiceDesc, srv)
}

func _DonutsService_AreYouOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreYouOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonutsServiceServer).AreYouOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donuts.DonutsService/AreYouOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonutsServiceServer).AreYouOpen(ctx, req.(*AreYouOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonutsService_CreateDonuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDonutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonutsServiceServer).CreateDonuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donuts.DonutsService/CreateDonuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonutsServiceServer).CreateDonuts(ctx, req.(*CreateDonutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonutsService_GetDonutsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonutsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonutsServiceServer).GetDonutsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donuts.DonutsService/GetDonutsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonutsServiceServer).GetDonutsList(ctx, req.(*GetDonutsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonutsService_OrderDonuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDonutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonutsServiceServer).OrderDonuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donuts.DonutsService/OrderDonuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonutsServiceServer).OrderDonuts(ctx, req.(*OrderDonutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonutsService_UpdateDonuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDonutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonutsServiceServer).UpdateDonuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donuts.DonutsService/UpdateDonuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonutsServiceServer).UpdateDonuts(ctx, req.(*UpdateDonutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonutsService_ClearDonuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearDonutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonutsServiceServer).ClearDonuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/donuts.DonutsService/ClearDonuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonutsServiceServer).ClearDonuts(ctx, req.(*ClearDonutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DonutsService_ServiceDesc is the grpc.ServiceDesc for DonutsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonutsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donuts.DonutsService",
	HandlerType: (*DonutsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouOpen",
			Handler:    _DonutsService_AreYouOpen_Handler,
		},
		{
			MethodName: "CreateDonuts",
			Handler:    _DonutsService_CreateDonuts_Handler,
		},
		{
			MethodName: "GetDonutsList",
			Handler:    _DonutsService_GetDonutsList_Handler,
		},
		{
			MethodName: "OrderDonuts",
			Handler:    _DonutsService_OrderDonuts_Handler,
		},
		{
			MethodName: "UpdateDonuts",
			Handler:    _DonutsService_UpdateDonuts_Handler,
		},
		{
			MethodName: "ClearDonuts",
			Handler:    _DonutsService_ClearDonuts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "donuts/protos/donuts.proto",
}
